{"version":3,"sources":["../../src/pages/add-technology/add-technology.module.ts","../../src/pages/add-technology/add-technology.ts"],"names":[],"mappings":"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","file":"0.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { AddTechnology } from './add-technology';\n\n@NgModule({\n  declarations: [\n    AddTechnology,\n  ],\n  imports: [\n    IonicPageModule.forChild(AddTechnology),\n  ],\n  exports: [\n    AddTechnology\n  ]\n})\nexport class AddTechnologyModule {}\n\n\n// WEBPACK FOOTER //\n// ./src/pages/add-technology/add-technology.module.ts","import { Component } from '@angular/core';\nimport { IonicPage, NavController, NavParams, ToastController } from 'ionic-angular';\nimport { FormGroup, Validators, FormBuilder } from '@angular/forms';\nimport { Http, Headers, RequestOptions } from '@angular/http';\nimport 'rxjs/add/operator/map';\n\n\n@IonicPage()\n@Component({\n  selector: 'page-add-technology',\n  templateUrl: 'add-technology.html'\n})\nexport class AddTechnology {\n\n   // Define FormBuilder /model properties\n   public form                   : FormGroup;\n   public technologyName         : any;\n   public technologyDescription  : any;\n   // Flag to be used for checking whether we are adding/editing an entry\n   public isEdited               : boolean = false;\n   // Flag to hide the form upon successful completion of remote operation\n   public hideForm               : boolean = false;\n   // Property to help ste the page title\n   public pageTitle              : string;\n   // Property to store the recordID for when an existing entry is being edited\n   public recordID               : any      = null;\n   private baseURI               : string  = \"http://localhost/ionic-php-mysql/\";\n    \n   // Initialise module classes\n   constructor(public navCtrl    : NavController,\n               public http       : Http,\n               public NP         : NavParams,\n               public fb         : FormBuilder,\n               public toastCtrl  : ToastController) \n   {\n\n      // Create form builder validation rules\n      this.form = fb.group({\n         \"name\"                  : [\"\", Validators.required],\n         \"description\"           : [\"\", Validators.required]\n      });\n   }\n\n\n\n   // Determine whether we adding or editing a record\n   // based on any supplied navigation parameters\n   ionViewWillEnter()\n   {\n      this.resetFields();\n\n      if(this.NP.get(\"record\"))\n      {\n         this.isEdited      = true;\n         this.selectEntry(this.NP.get(\"record\"));\n         this.pageTitle     = 'Amend entry';\n      }\n      else\n      {\n         this.isEdited      = false;\n         this.pageTitle     = 'Create entry';\n      }\n   }\n\n\n\n   // Assign the navigation retrieved data to properties\n   // used as models on the page's HTML form\n   selectEntry(item)\n   {\n      this.technologyName        = item.name;\n      this.technologyDescription = item.description;\n      this.recordID              = item.id;\n   }\n\n\n\n   // Save a new record that has been added to the page's HTML form\n   // Use angular's http post method to submit the record data \n   // to our remote PHP script (note the body variable we have created which \n   // supplies a variable of key with a value of create followed by the key/value pairs\n   // for the record data\n   createEntry(name, description)\n   {\n      let body     : string   = \"key=create&name=\" + name + \"&description=\" + description,\n          type     : string   = \"application/x-www-form-urlencoded; charset=UTF-8\",\n          headers  : any      = new Headers({ 'Content-Type': type}),\n          options  : any      = new RequestOptions({ headers: headers }),\n          url      : any      = this.baseURI + \"manage-data.php\";\n\n      this.http.post(url, body, options)\n      .subscribe((data) =>\n      {\n         // If the request was successful notify the user\n         if(data.status === 200)\n         {\n            this.hideForm   = true;\n            this.sendNotification(`Congratulations the technology: ${name} was successfully added`);\n         }\n         // Otherwise let 'em know anyway\n         else\n         {\n            this.sendNotification('Something went wrong!');\n         }\n      });\n   }\n\n\n\n   // Update an existing record that has been edited in the page's HTML form\n   // Use angular's http post method to submit the record data \n   // to our remote PHP script (note the body variable we have created which \n   // supplies a variable of key with a value of update followed by the key/value pairs\n   // for the record data\n   updateEntry(name, description)\n   {\n      let body       : string = \"key=update&name=\" + name + \"&description=\" + description + \"&recordID=\" + this.recordID,\n          type       : string = \"application/x-www-form-urlencoded; charset=UTF-8\",\n          headers    : any     = new Headers({ 'Content-Type': type}),\n          options    : any     = new RequestOptions({ headers: headers }),\n          url        : any     = this.baseURI + \"manage-data.php\";\n\n      this.http.post(url, body, options)\n      .subscribe(data =>\n      {\n         // If the request was successful notify the user\n         if(data.status === 200)\n         {\n            this.hideForm  =  true;\n            this.sendNotification(`Congratulations the technology: ${name} was successfully updated`);\n         }\n         // Otherwise let 'em know anyway\n         else\n         {\n            this.sendNotification('Something went wrong!');\n         }\n      });\n   }\n\n\n\n   // Remove an existing record that has been selected in the page's HTML form\n   // Use angular's http post method to submit the record data \n   // to our remote PHP script (note the body variable we have created which \n   // supplies a variable of key with a value of delete followed by the key/value pairs\n   // for the record ID we want to remove from the remote database\n   deleteEntry()\n   {\n      let name       : string = this.form.controls[\"name\"].value,\n          body       : string    = \"key=delete&recordID=\" + this.recordID,\n          type       : string = \"application/x-www-form-urlencoded; charset=UTF-8\",\n          headers    : any    = new Headers({ 'Content-Type': type}),\n          options    : any    = new RequestOptions({ headers: headers }),\n          url        : any    = this.baseURI + \"manage-data.php\";\n\n      this.http.post(url, body, options)\n      .subscribe(data =>\n      {\n         // If the request was successful notify the user\n         if(data.status === 200)\n         {\n            this.hideForm     = true;\n            this.sendNotification(`Congratulations the technology: ${name} was successfully deleted`);\n         }\n         // Otherwise let 'em know anyway\n         else\n         {\n            this.sendNotification('Something went wrong!');\n         }\n      });\n   }\n\n\n\n   // Handle data submitted from the page's HTML form\n   // Determine whether we are adding a new record or amending an\n   // existing record\n   saveEntry()\n   {\n      let name          : string = this.form.controls[\"name\"].value,\n          description   : string    = this.form.controls[\"description\"].value;\n\n      if(this.isEdited)\n      {\n         this.updateEntry(name, description);\n      }\n      else\n      {\n         this.createEntry(name, description);\n      }\n   }\n\n\n\n   // Clear values in the page's HTML form fields\n   resetFields() : void\n   {\n      this.technologyName           = \"\";\n      this.technologyDescription    = \"\"; \n   }\n\n\n\n   // Manage notifying the user of the outcome\n   // of remote operations\n   sendNotification(message)  : void\n   {\n      let notification = this.toastCtrl.create({\n          message       : message,\n          duration      : 3000\n      });\n      notification.present();\n   }\n\n\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/pages/add-technology/add-technology.ts"],"sourceRoot":""}